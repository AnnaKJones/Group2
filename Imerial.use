model ImperialAcademy

-- ----------------------------
-- Classes
-- ----------------------------
class Date
attributes
    day: Integer
    month: Integer
    year: Integer
operations

    Date (d:Integer, m:Integer, y:Integer)
    begin
 	self.day:= d;
 	self.month:= m;
 	self.year:= y;
    end
    equals(d: Date): Boolean =
        if (day=d.day and month=d.month and year=d.year )

            	then true

            	else false

        endif


    isAfter(d: Date): Boolean =

        not isBefore(d) and not equals(d)


    isBefore(d: Date): Boolean =

        not equals(d) and

        if year < d.year

            then true

            else

                if year=d.year and month<d.month

                then true

                else

                if year=d.year and month=d.month and day<d.day

                    	then true

                    	else false

                	endif

            	endif

        endif

end

enum AcademicStanding{
	GoodStanding, Warning, Suspension, Expulsion
}

enum ApplicationStatus{
	Accepted, Rejected, Pending, Waitlisted
}

class Semester
attributes
	startDate: Date
	endDate: Date
end

associationclass Registration between
	Student[1..*] role students
	School[1] role school
attributes
    semester: Integer
    registrationStatus: String    
end

abstract class User
attributes
    name: String
    title: String
    gender: String
    dob:Date
    email: String
    phoneNumber:String
    age: Integer derived:

        let

            current = dob.now

        in

        if (dob.month < current.month) or

            (dob.month = current.month and

                dob.day <= current.day)

        then current.year - dob.year

        else (current.year - dob.year) - 1

        endif
end

class Parent< User end
class Student< User
attributes
	ability: String
	points: Integer init: 100
	academicStanding: AcademicStanding
constraints
--Constraint 22: Students may not obtain more than 100 points and no less than 0
	inv maxPoints:
		points<=100 and points>=0
end

abstract class Staff< User end

class Trainer < Staff end
class GuidanceCounsellor < Staff end
class Principal < Staff end

class Assistant < Staff end


class School
attributes
	name: String
end

associationclass Enroll between
	Student[1..*] role students
	Trainer[1] role trainer
end

class Class
attributes
	name:String
constraints
--Constraint: Class size must be between 5 and 15
	inv studentPerClass:
		enrollments->size()>5 and enrollments->size<=15
--	students>=5 and students<=15 
end

class AdmitApp
attributes
     date: Date
     status: ApplicationStatus
end

class StudRecord
attributes
    name: String derived:
	student.title.concat(' ').concat(student.name)
    gender: String derived: 
	student.gender
    dob: Date derived:
	student.dob
    age: Integer derived:
	student.age
    ability: String derived:
	student.ability
    comments: String
end

class Report
attributes
	students: Set(Student)
	staff: Set(Staff)
	comments:String
end

class StaffRecord
attributes
    name: String derived:
	staffmember.title.concat(' ').concat(staffmember.name)
    gender: String derived:
	staffmember.gender
    dob:Date derived:
	staffmember.dob
    email: String derived:
	staffmember.email
    phoneNumber:String derived:
	staffmember.phoneNumber
    age: Integer derived:
	staffmember.age
    pay: Real
    comments: String
end

class Period
attributes
    startDate: Date
    endDate: Date
end

-- ---------------------------------
-- Associations
-- ---------------------------------

association Parents between
	Parent[1..*] role parent
	Student[1..*] role child
end


association SchoolPrincipal between
	Principal[1] role principal
	School[1] role school
end

association Classes between
	Class[1..*] role classes
	School[1] role school
end

association Semesters between
	School[1] role school
	Semester[1..*] role semesters
end

association SemesterRegister between
	Registration[1..*] role registration
	Semester[1..*] role semester
end

association ClassOffered between
	Enroll[1..*] role enrollments
	Class[1] role class
end


association dNowD between

    Date[0..*]

    Date[1] role now

end


association SchoolReport between
	Principal[1] role principal
	Report[1..*] role reports
end

association ReportPeriod between
	Report[*] role reports
	Period[1] role period
end

association AdmissionPeriod between 
	AdmitApp[*] role requests
	Period[0..1] role period
end

association RegistrationApps between
	AdmitApp[*] role application
	Registration[*] role registrations
end

association StudentRecords between
	StudRecord[*] role records
	Staff[*] role staff
end

association StudentRecord between
	StudRecord[1] role record
	Student[1] role student
end

association StaffRecords between
	Staff[1] role staffmember
	StaffRecord[1] role record
end

association Application between
	Student[1] role student
	AdmitApp[1..*] role applications
end